// sudoku will be returned back to UI.js
function generateSudoku() {
	var hello = new Date();
	var startTime;
	var endTime;

	// creating sudoku matrix
	let sudoku = new Array(9);
	for (let i = 0; i < 9; i++) sudoku[i] = new Array(9);

	let timeN = 1;
	while (true) {
		startTime = new Date();
		let sudokuMemory = new Set();

		let looping;
		for (let i = 0; i < 9; i++) {
			let currentRow = [];
			looping = false;
			for (let j = 0; j < 9; j++) {
				let val = Math.floor(Math.random() * 9);
				let row = `r:${i} v:${val}`;
				let col = `c:${j} v:${val}`;
				let block = `b:${Math.floor(i / 3)}x${Math.floor(
					j / 3
				)} v:${val}`;
				let k = 0;
				while (
					sudokuMemory.has(row) ||
					sudokuMemory.has(col) ||
					sudokuMemory.has(block)
				) {
					// console.log('while');
					if (k % 9 == 8) {
						for (let dlt = j; dlt >= 0; dlt--) {
							sudokuMemory.delete(currentRow.pop());
							sudokuMemory.delete(currentRow.pop());
							sudokuMemory.delete(currentRow.pop());
							sudoku[i][j--] = -1;
						}
						j = 0;
					}

					k++;
					val = (val + 1) % 9;
					row = `r:${i} v:${val}`;
					col = `c:${j} v:${val}`;
					block = `b:${Math.floor(i / 3)}x${Math.floor(
						j / 3
					)} v:${val}`;
				}
				sudokuMemory.add(row);
				sudokuMemory.add(col);
				sudokuMemory.add(block);

				currentRow.push(row);
				currentRow.push(col);
				currentRow.push(block);
				sudoku[i][j] = val + 1;

				endTime = new Date();
				var timeDiff = endTime - startTime;
				timeDiff /= 1000;
				if (timeDiff > timeN) {
					looping = true;
					break;
				}
			}
			if (looping) break;
		}
		if (!looping) break;
		timeN += 0.75;
	}

	var hello2 = new Date();
	var timeDiff = hello2 - hello;
	timeDiff /= 1000;
	var seconds = Math.round(timeDiff);

	return sudoku;
}

// sudoku UI will be returned to UI.js
function generateSudokuUI(difficulty = 0) {
	// difficulty:
	// 0 - easy
	// 1 - medium
	// 2 - hard

	if(difficulty == 0) difficulty = 5;
	else if(difficulty == 1) difficulty = 4;
	else difficulty = 3;

	// this matrix will contain class names that every sudoku element will have - generated(auto generated by game), user-input, error
	let sudokuUI = new Array(9);
	for (let i = 0; i < 9; i++) sudokuUI[i] = new Array(9);
	for (let i = 0; i < 9; i++) sudokuUI[i].fill('');

	for (let i = 0; i < 9; i++) {
		let filled = [];
		for (let j = 0; j < difficulty; j++) {
			let toFill = Math.floor(Math.random() * 9);
			while (filled.includes(toFill)) {
				toFill = Math.floor(Math.random() * 9);
			}
			sudokuUI[i][toFill] = 'generated';
		}
	}
	return sudokuUI;
}